# Use the latest 2.1 version of CircleCI pipeline process engi
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} 
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-west-2
  configure_infrastructure: 
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["6e:e2:4f:35:8e:c5:c9:98:09:a1:8a:83:8c:53:fa:98"] 
        # install ansible   now   ok  
        - run:
            name: Install Ansible
            command: |
              # Install Ansible
              apk add --update ansible
        - run:
            name: Run Playbook and Configure server
            command: |
              # Your command  
              ansible-playbook -i inventory main4.yml  
  # Exercise: Smoke Testing
  smoke_test:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: smoke test
            command: return 1                 
        - destroy_environment  
  create_and_deploy_front_end:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Execute bucket.yml - Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"      
        # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      # - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete     
# Invoke job- run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --deletes via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
 # Fetch and save the pipeline ID (bucket ID) responsible for the last release.

  get_last_deployment_id:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
            command: |
              aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
        - persist_to_workspace:
            root: ~/
            paths: 
              - textfile.txt 

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Execute cloudfront.yml
            command: |
              aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"    
  clean_up_old_front_end:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
            # Use $OldBucketID environment variable or mybucket644752792305 below.
            # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
            command: |
              export OldBucketID=$(cat ~/textfile.txt)
              aws s3 rm "s3://${OldBucketID}" --recursive
            #  aws cloudformation delete-stack --stack-name production-distro 
            #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
            #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}                     
workflows:
  say-hello-workflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
            requires: 
              - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production  
            
      #- say-hello
       #- create_infrastructure
      #- configure_infrastructure
      # - smoke_test:
            # requires:
            #   - create_infrastructure
     